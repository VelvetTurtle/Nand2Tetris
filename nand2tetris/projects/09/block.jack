/*
Date: 2/28/2021
file containing class information for individual tetris blocks
*/ 

class Block{
    var Array realXCoordinates;
    var Array realYCoordinates;
    constructor Block new(Array xcoordinates, Array ycoordinates, int cellSize){
        let realXCoordinates = Array.new(4);
        let realYCoordinates = Array.new(4);
        var int i;
        let i = 0;
        while(i < 4){
            realXCoordinates[i] = Math.multiply(xcoordinates[i], cellSize);
            realYCoordinates[i] = Math.multiply(ycoordinates[i], cellSize);
            i = i+1;
        }
    }
    function Array getX(){
        return realXCoordinates;
    }
    function Array getY(){
        return realYCoordinates;
    }
    method void drawBox(int x, int y){
        var int memAddress;
        let memAddress = 16384+(x*32)+(y/16);
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 32766);
        do Memory.poke(memAddress+64, 32766);
        do Memory.poke(memAddress+96, 32766);
        do Memory.poke(memAddress+128, 32766);
        do Memory.poke(memAddress+160, 32766);
        do Memory.poke(memAddress+192, 32766);
        do Memory.poke(memAddress+224, 32766);
        do Memory.poke(memAddress+256, 32766);
        do Memory.poke(memAddress+288, 32766);
        do Memory.poke(memAddress+320, 32766);
        do Memory.poke(memAddress+352, 32766);
        do Memory.poke(memAddress+384, 32766);
        do Memory.poke(memAddress+416, 32766);
        do Memory.poke(memAddress+448, 32766);
        do Memory.poke(memAddress+480, 0);
	    return;
    }
    method void eraseBox(int x, int y){
        var int memAddress;
        let memAddress = 16384+(x*32)+(y/16);
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 0);
        do Memory.poke(memAddress+96, 0);
        do Memory.poke(memAddress+128, 0);
        do Memory.poke(memAddress+160, 0);
        do Memory.poke(memAddress+192, 0);
        do Memory.poke(memAddress+224, 0);
        do Memory.poke(memAddress+256, 0);
        do Memory.poke(memAddress+288, 0);
        do Memory.poke(memAddress+320, 0);
        do Memory.poke(memAddress+352, 0);
        do Memory.poke(memAddress+384, 0);
        do Memory.poke(memAddress+416, 0);
        do Memory.poke(memAddress+448, 0);
        do Memory.poke(memAddress+480, 0);
        return;
    }
    method void drawShape(int x, int y){
        var int i;
        let i = 0;
        while(i<4){
           do drawBox((x+realXCoordinates[i]),(y+realYCoordinates[i]));
        }
        return;
    }
    method void eraseShape(int x, int y){
        var int i;
        let i = 0;
        while(i<4){
            do eraseBox((x+realXCoordinates[i]), (y+realYCoordinates[i]));
        }
        return;
    }
    method void moveRight(int x, int y){
        var int maxX;
        var int memAddress;
        let maxX = Math.max(realXCoordinates[0],realXCoordinates[1]);
        let maxX = Math.max(maxX, realXCoordinates[3]);
        let maxX = Math.max(maxX, realXCoordinates[4]);
        let maxX = maxX+10
        let memAddress = 16384+(maxX*32)+(y/16);
        if(Memory.peek(memAddress)= 0){
            do eraseBox(x,y);
            do drawShape(x+16,y);
        }
        return;
    }
    method void moveLeft(){
        var int minX;
        var int memAddress;
        let minX = Math.min(realXCoordinates[0],realXCoordinates[1]);
        let minX = Math.max(minX, realXCoordinates[3]);
        let minX = Math.max(minX, realXCoordinates[4]);
        let minX = minX+10
        let memAddress = 16384+(minX*32)+(y/16);
        if(Memory.peek(memAddress)= 0){
            do eraseBox(x,y);
            do drawShape(x-16,y);
        }
        return;
    }
}
