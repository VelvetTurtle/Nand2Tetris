/*
Name: Elizabeth Fox
Date: 2/28/2021
class that handles the game board for tetris game
*/
class tetrisGame{
    field Array blockTypes;
    //linked lists to allow O(1) rotations mid game. Lists are built upon startup
    field boolean isGameOver;
    field List squareRotations;
    field List longRotations;
    field List tRotations;
    field List leftLRotations;
    field List rightLRotations;
    field List leftZRotations;
    field List rightZRotations;
    field Array blockOrder;
    static tetrisGame instance;
    field int level, score, line;
    field Board board;
    field List currentBlock;
    constructor tetrisGame new(){
        let level = 0;
        let score = 0;
        board = Board.new(176,336,16);
    }
    function void newInstance(){
        let instance = tetrisGame.new();
        return;
    }
    function tetrisGame getInstance(){
        return instance;
    }
    method int getScore(){
        return score;
    }
    method int getLevel(){
        return level;
    }
    method int getLines(){
        return lines;
    }
    method void run(){
        do initializesBlockTypes();
        do initializesBlockTypes();
        var char key;  // the key currently pressed by the user
        var boolean exit;
        var int x;
        var int y;
        var int i;
        let x = 256;
        let y = 0;
        let i = 0;
        let exit = false;
        let currentBlock = null;
        while (~(isGameOver)) {
            // waits for a key to be pressed
            if (currentBlock = null){
                if(blockOrder[i]=0){
                    currentBlock = squareRotations;
                }
                else if (blockOrder[i]=1){
                    currentBlock = longRotations;
                }
                else if (blockOrder[i]=2){
                    currentBlock =tRotations;
                }
                else if (blockOrder[i]=3){
                    currentBlock =leftLRotations;
                }
                else if (blcokOrder[i]=4){
                    currentBlock = rightLRotations;
                }
                else if (blockOrder[i]=5){
                    currentBlock = leftZRotations;
                }
                else if (blockOrder[i]=6){
                    currentBlock = rightZRotations
                }
                let i = i+1;
                let x = 256;
                let y = 0;
                board.spawnBlock(currentBlock.data);
            }
            while (key = 0) {
                do shapeFall();
            }
            if (key = 81)  { let isGameOver = true; }     // q key
            if (key = 90)  { do rotateShape(); } // z key
            if (key = 133) { let direction = 2; }   // down arrow
            if (key = 130) { do currentBlock.data.moveLeft(); }   // left arrow
            if (key = 132) { do currentBlock.data.moveRight(); }   // right arrow

            // waits for the key to be released
            while (~(key = 0)) {
                let key = Keyboard.keyPressed();
                do moveSquare();
            }
        } // whileq
        return;
    }
    method void rotateShape(){
       currentBlock = currentBlock.next;
       return; 
    }
    //create an array containing block objects for each type of block
    method void initializesBlockTypes(){
        let blockType[0] = squareBlock();
        let blockType[1] = longBlock();
        let blockType[2] = tBlock();
        let blockType[3] = leftLBlock();
        let blockType[4] = rightLBlock();
        let blockType[5] = leftZBlock();
        let blockType[6] = rightZBlock();
        do initializeRotations;
        return;
    }
    method void initializeRotations(){
        var int i;
        let i = 0;
        while(i<7){
            if(i==0){
                let squareRotations = List.new(blocktype[0],null);
                do fillRotations(squareRotations);
            }
            else if(i==1){
                let longRotations = List.new(blockType[1],null);
                do fillRotations(longRotations);
            }
            else if(i==2){
                let tRotations = List.new(blockType[2],null);
                do fillRotations(tRotations);
            }
            else if(i==3){
                let leftLRotations = List.new(blockType[3],null);
                do fillRotations(leftLRotations);
            }
            else if (i==4){
                let rightLRotations = List.new(blockType[4],null);
                do fillRotations(rightLRotations);
            }
            else if (i==5){
                let leftZRotations = List.new(blockType[5],null);
                do fillRotations(leftZRotations);
            }
            else if (i==6){
                let rightZBlock = List.new(blockType[6],null);
                do fillRotations(rightZRotations);
            }
            i = i+1;
        }
        return;
    }
    method void fillRotations(List list){
        var Block node, temp;
        var List node;
        let node = null;
        let temp = list.data; 
        while(temp != node.data){
            if(node = null){
                node = list;
            }
            let node.next = Block.new(negateArray(node.data.getY()),node.data.getX);
            let node = node.next;
        }
        return;
    }
    function Array negateArray(Array array){
        var int i;
        let i=0
        while(i<4){
            array[i] = multiply(-1, array[i])
        }
        return array;
    }
    method Block squareBlock(){
        var Array x;
        var Array y;
        var Block block;
        var int length;
        let length = 4;
        let x = Array.new(length);
        let y = Array.new(length);
        x[0] = 0;
        y[0] = 0;
        x[1] = 1;
        y[1] = 0;
        x[2] = 0;
        y[2] = 1;
        x[3] = 1;
        y[3] = 1;
        block = Block.new(x,y,cellSize);
        return block;
    }
    method void longBlock(){
        var Array x;
        var Array y;
        var int length;
        let length = 4;
        let x = Array.new(length);
        let y = Array.new(length);
        x[0] = 0;
        y[0] = 0;
        x[1] = 0;
        y[1] = 1;
        x[2] = 0;
        y[2] = 2;
        x[3] = 0;
        y[3] = 3;
        block = Block.new(x,y,cellSize);
    }
    method Block tBlock(){
        var Array x;
        var Array y;
        var int length;
        let length = 4;
        let x = Array.new(length);
        let y = Array.new(length);
        x[0] = 0;
        y[0] = 0;
        x[1] = 1;
        y[1] = 0;
        x[2] = 2;
        y[2] = 0;
        x[3] = 1;
        y[3] = 1;
        block = Block.new(x,y,cellSize);
        return block;
    }
    method Block leftLBlock(){
        var Array x;
        var Array y;
        var int length;
        let length = 4;
        let x = Array.new(length);
        let y = Array.new(length);
        x[0] = 0;
        y[0] = 0;
        x[1] = 1;
        y[1] = 0;
        x[2] = 1;
        y[2] = 1;
        x[3] = 1;
        y[3] = 2;
        block = Block.new(x,y,cellSize);
        return block;
    }
    method BLock rightLBlock(){
        var Array x;
        var Array y;
        var int length;
        let length = 4;
        let x = Array.new(length);
        let y = Array.new(length);
        x[0] = 0;
        y[0] = 0;
        x[1] = 1;
        y[1] = 0;
        x[2] = 0;
        y[2] = 1;
        x[3] = 0;
        y[3] = 2;
        block = Block.new(x,y,cellSize);
        return block;
    }
    method Block leftZBlock(){
        var Array x;
        var Array y;
        var int length;
        let length = 4;
        let x = Array.new(length);
        let y = Array.new(length);
        x[0] = 0;
        y[0] = 1;
        x[1] = 1;
        y[1] = 1;
        x[2] = 1;
        y[2] = 0;
        x[3] = 2;
        y[3] = 0;
        block = Block.new(x,y,cellSize);
        return block;
    }
    method Block rightZBlock(){
        var Array x;
        var Array y;
        var int length;
        let length = 4;
        let x = Array.new(length);
        let y = Array.new(length);
        x[0] = 0;
        y[0] = 0;
        x[1] = 1;
        y[1] = 0;
        x[2] = 1;
        y[2] = 1;
        x[3] = 1;
        y[3] = 2;
        block = Block.new(x,y,cellSize);
        return block;
    }
    method int initaializeBlockOrder(){
        var int i;
        let i = 0;
        while(i<40){
            blockOrder[i] = 0;
            blockOrder[i+1] = 1;
            blockOrder[i+2] = 2;
            blockOrder[i+3] = 3;
            blockOrder[i+4] = 4;
            blockOrder[i+5] = 5;
            blockOrder[i+6] = 6;
            blockOrder[i+7] = 7;
            i = i +7;
        }
        return;
    }
}