/*
Name: Elizabeth Fox
Date: 2/28/2021
class that handles the game board for tetris game
*/
class Board{
    field int cellSize;
    field int leftWall;
    field int rightWall;
    field int topWall;
    field int bottomWall;
    constructor Board new(int leftBoarder, int rightBoarder, int cellSize){
        let level = 0;
        let score = 0;
        let cellSize = cellSize;
        let leftWall = leftBoarder;
        let rightWall = rightWall;
        Screen.clearScreen();
        initializesBlockTypes();
        do createWalls();
    }
    method void createWalls(){
        Screen.drawRectangle(leftBoarder, 0, leftBoarder-cellSize, 256);
        Screen.drawRectangle(rightBoarder,0, rightBoarder+cellSize, 256);
        return;
    }
    method void spawnBlock(Block block){
        block.drawshape(256, 0);
        return;
    }
    method void displayStats(int score, int lines, int level){
        do Output.moveCursor(400,100);
        do Output.printString("Score: ");
        do Output.printInt(score);
        do Output.moveCursor(400, 116);
        do Output.printString("Lines: ");
        do Output.printInt(lines);
        do Output.moveCursor(400,132);
        do Output.printString("Level: ");
        do Output.printInt(level);
        return
    }
    //method that returns height of placed blocks in blocks
    method int getHeight(int col){
        var int yLocation;
        var int height;
        var int memAddress; 
        let memAddress = 16384+Math.multiply(col,32)+Math.divide(yLocation,16);
        let yLocation = 5;
        let height = 15;
        while(Memory.peek(memAddress)=0 & ~(height=0)){
            yLocation = yLocation + 16;
            let memAddress = 16384+Math.multiply(col,32)+Math.divide(yLocation,16);
            height = height-1;
        }
        return height;
    }
    method int isRowFilled(int row){
        var int xLocation;
        var int memAddress;
        var int width;
        let xLocation = 5;
        let memAddress = 16384+Math.multiply(xLocation,32)+Math.divide(row,16);
        let width = 1;
        while(~(Memory.peek(memAddress)=0)){
            let memAddress = 16384+Math.multiply(xLocation,32)+Math.divide(row,16);
            xLocation = xLocation +16;
            width = width + 1;
        }
        if(width=10){
            return 1;
        }
        else{
            return 0;
        }
    }
    method void clearRow(int row){
        var int trueRow();
        let trueRow = Math.multiply(row,16);
        Screen.drawRectangle(leftBoarder, trueRow, rightBoarder, trueRow +16);

    }
}