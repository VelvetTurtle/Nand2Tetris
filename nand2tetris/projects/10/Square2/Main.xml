<class>
    <keyword>class</keyword>
    <identifier>Main</identifier>
    <symbol>{</symbol>
    <classVarDec>
        <keyword>static</keyword>
        <keyword>boolean</keyword>
        <identifier>test</identifier>
        <symbol>;</symbol>
    </classVarDec>
    <subroutine>
        <keyword>function</keyword>
        <keyword>void</keyword>
        <identifier>main</identifier>
        <symbol>(</symbol>
        <parameterList>
        </parameterList>
        <symbol>)</symbol>
        <symbol>{</symbol>
        <varDeclaration>
            <keyword>var</keyword>
            <identifier>SquareGame</identifier>
            <identifier>game</identifier>
            <symbol>;</symbol>
        </varDeclartion>
        <statements>
            <letStatement>
                <keyword>let</keyword>
                <identifier>game</identifier>
                <symbol>=</symbol>
                <expression>
                    <term>
                        <identifier>SquareGame</identifier>
                        <symbol>.</symbol>
                        <identifier>new</identifier>
                        <symbol>(</symbol>
                        <expressionList>
                        </expressionList>
                        <symbol>)</symbol>
                    </term>
                </expression>
                <symbol>;</symbol>
            </letStatement>
            <doStatement>
                <keyword>do</keyword>
                <identifier>game</identifier>
                <symbol>.</symbol>
                <identifier>run</identifier>
                <symbol>(</symbol>
                <expressionList>
                </expressionList>
                <symbol>)</symbol>
                <symbol>;</symbol>
            </doStatement>
            <doStatement>
                <keyword>do</keyword>
                <identifier>game</identifier>
                <symbol>.</symbol>
                <identifier>dispose</identifier>
                <symbol>(</symbol>
                <expressionList>
                </expressionList>
                <symbol>)</symbol>
                <symbol>;</symbol>
            </doStatement>
            <returnStatement>
                <keyword>return</keyword>
                <symbol>;</symbol>
            </returnStatement>
        </statements>
        <symbol>}</symbol>
    </subroutine>
    <subroutine>
        <keyword>function</keyword>
        <keyword>void</keyword>
        <identifier>test</identifier>
        <symbol>(</symbol>
        <parameterList>
        </parameterList>
        <symbol>)</symbol>
        <symbol>{</symbol>
        <varDeclaration>
            <keyword>var</keyword>
            <keyword>int</keyword>
            <identifier>i</identifier>
            <symbol>,</symbol>
            <identifier>j</identifier>
            <symbol>;</symbol>
        </varDeclartion>
        <varDeclaration>
            <keyword>var</keyword>
            <identifier>String</identifier>
            <identifier>s</identifier>
            <symbol>;</symbol>
        </varDeclartion>
        <varDeclaration>
            <keyword>var</keyword>
            <identifier>Array</identifier>
            <identifier>a</identifier>
            <symbol>;</symbol>
        </varDeclartion>
        <statements>
            <ifStatement>
                <keyword>if</keyword>
                <symbol>(</symbol>
                <expression>
                    <term>
                        <keyword>false</keyword>
                    </term>
                </expression>
                <symbol>)</symbol>
                <symbol>{</symbol>
                <statements>
                    <letStatement>
                        <keyword>let</keyword>
                        <identifier>s</identifier>
                        <symbol>=</symbol>
                        <expression>
                            <term>
                                <string_constant>string constant</string_constant>
                            </term>
                        </expression>
                        <symbol>;</symbol>
                    </letStatement>
                    <letStatement>
                        <keyword>let</keyword>
                        <identifier>s</identifier>
                        <symbol>=</symbol>
                        <expression>
                            <term>
                                <keyword>null</keyword>
                            </term>
                        </expression>
                        <symbol>;</symbol>
                    </letStatement>
                    <letStatement>
                        <keyword>let</keyword>
                        <identifier>a</identifier>
                        <symbol>[</symbol>
                        <expression>
                            <term>
                                <integer_constant>1</integer_constant>
                            </term>
                        </expression>
                        <symbol>]</symbol>
                        <symbol>=</symbol>
                        <expression>
                            <term>
                                <identifier>a</identifier>
                                <symbol>[</symbol>
                                <expression>
                                    <term>
                                        <integer_constant>2</integer_constant>
                                    </term>
                                </expression>
                                <symbol>]</symbol>
                            </term>
                        </expression>
                        <symbol>;</symbol>
                    </letStatement>
                </statements>
                <symbol>}</symbol>
                <keyword>else</keyword>
                <symbol>{</symbol>
                <statements>
                    <letStatement>
                        <keyword>let</keyword>
                        <identifier>i</identifier>
                        <symbol>=</symbol>
                        <expression>
                            <term>
                                <identifier>i</identifier>
                            </term>
                            <symbol>*</symbol>
                            <term>
                                <symbol>(</symbol>
                                <expression>
                                    <term>
                                        <symbol>-</symbol>
                                        <term>
                                            <identifier>j</identifier>
                                        </term>
                                    </term>
                                </expression>
                                <symbol>)</symbol>
                            </term>
                        </expression>
                        <symbol>;</symbol>
                    </letStatement>
                    <letStatement>
                        <keyword>let</keyword>
                        <identifier>j</identifier>
                        <symbol>=</symbol>
                        <expression>
                            <term>
                                <identifier>j</identifier>
                            </term>
                            <symbol>/</symbol>
                            <term>
                                <symbol>(</symbol>
                                <expression>
                                    <term>
                                        <symbol>-</symbol>
                                        <term>
                                            <integer_constant>2</integer_constant>
                                        </term>
                                    </term>
                                </expression>
                                <symbol>)</symbol>
                            </term>
                        </expression>
                        <symbol>;</symbol>
                    </letStatement>
                    <letStatement>
                        <keyword>let</keyword>
                        <identifier>i</identifier>
                        <symbol>=</symbol>
                        <expression>
                            <term>
                                <identifier>i</identifier>
                            </term>
                            <symbol>|</symbol>
                            <term>
                                <identifier>j</identifier>
                            </term>
                        </expression>
                        <symbol>;</symbol>
                    </letStatement>
                </statements>
                <symbol>}</symbol>
            </ifStatement>
            <returnStatement>
                <keyword>return</keyword>
                <symbol>;</symbol>
            </returnStatement>
        </statements>
        <symbol>}</symbol>
    </subroutine>
    <symbol>}</symbol>
</class>
